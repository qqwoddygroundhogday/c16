def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var11 = func3(arg2, var7)
    var16 = func5(var7, arg1)
    var35 = func6(arg2, var11)
    if var7 < var11:
        var36 = var7 ^ var35 | var16 - var7
    else:
        var36 = (var11 | 65 ^ var7) ^ -806
    var37 = var16 ^ 1759366087
    if var7 < arg1:
        var38 = var37 - var35 ^ (-107 + 910)
    else:
        var38 = 150012291 | var11 - (arg2 ^ var37)
    var39 = arg2 - var35 ^ var35 ^ var16
    var40 = var35 ^ 258987595
    var41 = 1039314463 + arg1 + var39 & 115
    var42 = ((var40 & var41) - var41) + 778
    var43 = -364034237 + arg1
    var44 = var42 & var41
    var45 = var35 + var39
    var46 = var41 & var39 & var35
    var47 = var7 - var7
    var48 = var41 & (var43 + arg2)
    var49 = var41 ^ -902894577
    var50 = (var11 & var43) & var49 + var35
    var51 = var41 | var42
    var52 = arg1 | var44 & var48 & var35
    if var16 < var37:
        var53 = var44 + var52
    else:
        var53 = var42 - var52
    if var48 < var44:
        var54 = var47 & var41
    else:
        var54 = var44 ^ var37 & var39
    var55 = var11 & (var35 & var50)
    var56 = (var44 ^ var39) + (var55 - arg2)
    var57 = (arg2 | var46 & var44) ^ var51
    result = var44 ^ (arg2 ^ (((var57 - (var37 + var43 & arg2)) | var51 + var46) ^ var51 + var52 - var39 - var55))
    return result
def func6(arg17, arg18):
    if arg17 < arg18:
        var19 = -2097892168 | (arg18 + (-1800785889 | arg17))
    else:
        var19 = ((arg17 & 421) - arg17) | arg18
    var20 = arg17 + 105
    var21 = -328 - arg17
    var22 = (49 & arg18) + var21 | var20
    var23 = var21 + var21 & -634 ^ arg17
    var24 = (var21 | var20) | var23 & arg17
    var25 = var23 | var20
    var26 = var25 ^ (var24 ^ 434) - var22
    var27 = arg18 | (var25 & var24) | var21
    var28 = (1033424298 + var24 | var24) ^ var23
    var29 = ((var23 ^ var28) + -233661526) + var23
    if var26 < arg17:
        var30 = -148588792 + (var26 + var25 + var24)
    else:
        var30 = var21 - (arg18 & var29) - var27
    var31 = var20 - var25
    var32 = arg18 | var31
    var33 = (var28 | var28) & arg17
    var34 = 1238334750 | 166
    result = var32 | var29 - var21 & var28
    return result
def func5(arg12, arg13):
    var14 = 0
    for var15 in xrange(3):
        var14 += arg12 ^ var15 + arg13
    return var14
def func2(arg3, arg4):
    var5 = 0
    for var6 in [var5 ^ i for i in range(8)]:
        var5 += (var5 & arg3) - arg4
    return var5
def func3(arg8, arg9):
    closure = [0]
    def func4(acc, rest):
        var10 = 2 & (-10 - ((2 | acc & rest ^ 2) ^ -10))
        closure[0] += var10
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 7'
    print 'arg_number: 58'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var11 = func3(arg2, var7)
    var16 = func5(var7, arg1)
    var35 = func6(arg2, var11)
    if var7 < var11:
        var36 = var7 ^ var35 | var16 - var7
    else:
        var36 = (var11 | 65 ^ var7) ^ -806
    var37 = var16 ^ 1759366087
    if var7 < arg1:
        var38 = var37 - var35 ^ (-107 + 910)
    else:
        var38 = 150012291 | var11 - (arg2 ^ var37)
    var39 = arg2 - var35 ^ var35 ^ var16
    var40 = var35 ^ 258987595
    var41 = 1039314463 + arg1 + var39 & 115
    var42 = ((var40 & var41) - var41) + 778
    var43 = -364034237 + arg1
    var44 = var42 & var41
    var45 = var35 + var39
    var46 = var41 & var39 & var35
    var47 = var7 - var7
    var48 = var41 & (var43 + arg2)
    var49 = var41 ^ -902894577
    var50 = (var11 & var43) & var49 + var35
    var51 = var41 | var42
    var52 = arg1 | var44 & var48 & var35
    if var16 < var37:
        var53 = var44 + var52
    else:
        var53 = var42 - var52
    if var48 < var44:
        var54 = var47 & var41
    else:
        var54 = var44 ^ var37 & var39
    var55 = var11 & (var35 & var50)
    var56 = (var44 ^ var39) + (var55 - arg2)
    var57 = (arg2 | var46 & var44) ^ var51
    result = var44 ^ (arg2 ^ (((var57 - (var37 + var43 & arg2)) | var51 + var46) ^ var51 + var52 - var39 - var55))
    return result
def func6(arg17, arg18):
    if arg17 < arg18:
        var19 = -2097892168 | (arg18 + (-1800785889 | arg17))
    else:
        var19 = ((arg17 & 421) - arg17) | arg18
    var20 = arg17 + 105
    var21 = -328 - arg17
    var22 = (49 & arg18) + var21 | var20
    var23 = var21 + var21 & -634 ^ arg17
    var24 = (var21 | var20) | var23 & arg17
    var25 = var23 | var20
    var26 = var25 ^ (var24 ^ 434) - var22
    var27 = arg18 | (var25 & var24) | var21
    var28 = (1033424298 + var24 | var24) ^ var23
    var29 = ((var23 ^ var28) + -233661526) + var23
    if var26 < arg17:
        var30 = -148588792 + (var26 + var25 + var24)
    else:
        var30 = var21 - (arg18 & var29) - var27
    var31 = var20 - var25
    var32 = arg18 | var31
    var33 = (var28 | var28) & arg17
    var34 = 1238334750 | 166
    result = var32 | var29 - var21 & var28
    return result
def func5(arg12, arg13):
    var14 = 0
    for var15 in xrange(3):
        var14 += arg12 ^ var15 + arg13
    return var14
def func2(arg3, arg4):
    var5 = 0
    for var6 in [var5 ^ i for i in range(8)]:
        var5 += (var5 & arg3) - arg4
    return var5
def func3(arg8, arg9):
    closure = [0]
    def func4(acc, rest):
        var10 = 2 & (-10 - ((2 | acc & rest ^ 2) ^ -10))
        closure[0] += var10
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 7'
    print 'arg_number: 58'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var11 = func3(arg2, var7)
    var16 = func5(var7, arg1)
    var35 = func6(arg2, var11)
    if var7 < var11:
        var36 = var7 ^ var35 | var16 - var7
    else:
        var36 = (var11 | 65 ^ var7) ^ -806
    var37 = var16 ^ 1759366087
    if var7 < arg1:
        var38 = var37 - var35 ^ (-107 + 910)
    else:
        var38 = 150012291 | var11 - (arg2 ^ var37)
    var39 = arg2 - var35 ^ var35 ^ var16
    var40 = var35 ^ 258987595
    var41 = 1039314463 + arg1 + var39 & 115
    var42 = ((var40 & var41) - var41) + 778
    var43 = -364034237 + arg1
    var44 = var42 & var41
    var45 = var35 + var39
    var46 = var41 & var39 & var35
    var47 = var7 - var7
    var48 = var41 & (var43 + arg2)
    var49 = var41 ^ -902894577
    var50 = (var11 & var43) & var49 + var35
    var51 = var41 | var42
    var52 = arg1 | var44 & var48 & var35
    if var16 < var37:
        var53 = var44 + var52
    else:
        var53 = var42 - var52
    if var48 < var44:
        var54 = var47 & var41
    else:
        var54 = var44 ^ var37 & var39
    var55 = var11 & (var35 & var50)
    var56 = (var44 ^ var39) + (var55 - arg2)
    var57 = (arg2 | var46 & var44) ^ var51
    result = var44 ^ (arg2 ^ (((var57 - (var37 + var43 & arg2)) | var51 + var46) ^ var51 + var52 - var39 - var55))
    return result
def func6(arg17, arg18):
    if arg17 < arg18:
        var19 = -2097892168 | (arg18 + (-1800785889 | arg17))
    else:
        var19 = ((arg17 & 421) - arg17) | arg18
    var20 = arg17 + 105
    var21 = -328 - arg17
    var22 = (49 & arg18) + var21 | var20
    var23 = var21 + var21 & -634 ^ arg17
    var24 = (var21 | var20) | var23 & arg17
    var25 = var23 | var20
    var26 = var25 ^ (var24 ^ 434) - var22
    var27 = arg18 | (var25 & var24) | var21
    var28 = (1033424298 + var24 | var24) ^ var23
    var29 = ((var23 ^ var28) + -233661526) + var23
    if var26 < arg17:
        var30 = -148588792 + (var26 + var25 + var24)
    else:
        var30 = var21 - (arg18 & var29) - var27
    var31 = var20 - var25
    var32 = arg18 | var31
    var33 = (var28 | var28) & arg17
    var34 = 1238334750 | 166
    result = var32 | var29 - var21 & var28
    return result
def func5(arg12, arg13):
    var14 = 0
    for var15 in xrange(3):
        var14 += arg12 ^ var15 + arg13
    return var14
def func2(arg3, arg4):
    var5 = 0
    for var6 in [var5 ^ i for i in range(8)]:
        var5 += (var5 & arg3) - arg4
    return var5
def func3(arg8, arg9):
    closure = [0]
    def func4(acc, rest):
        var10 = 2 & (-10 - ((2 | acc & rest ^ 2) ^ -10))
        closure[0] += var10
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 7'
    print 'arg_number: 58'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var11 = func3(arg2, var7)
    var16 = func5(var7, arg1)
    var35 = func6(arg2, var11)
    if var7 < var11:
        var36 = var7 ^ var35 | var16 - var7
    else:
        var36 = (var11 | 65 ^ var7) ^ -806
    var37 = var16 ^ 1759366087
    if var7 < arg1:
        var38 = var37 - var35 ^ (-107 + 910)
    else:
        var38 = 150012291 | var11 - (arg2 ^ var37)
    var39 = arg2 - var35 ^ var35 ^ var16
    var40 = var35 ^ 258987595
    var41 = 1039314463 + arg1 + var39 & 115
    var42 = ((var40 & var41) - var41) + 778
    var43 = -364034237 + arg1
    var44 = var42 & var41
    var45 = var35 + var39
    var46 = var41 & var39 & var35
    var47 = var7 - var7
    var48 = var41 & (var43 + arg2)
    var49 = var41 ^ -902894577
    var50 = (var11 & var43) & var49 + var35
    var51 = var41 | var42
    var52 = arg1 | var44 & var48 & var35
    if var16 < var37:
        var53 = var44 + var52
    else:
        var53 = var42 - var52
    if var48 < var44:
        var54 = var47 & var41
    else:
        var54 = var44 ^ var37 & var39
    var55 = var11 & (var35 & var50)
    var56 = (var44 ^ var39) + (var55 - arg2)
    var57 = (arg2 | var46 & var44) ^ var51
    result = var44 ^ (arg2 ^ (((var57 - (var37 + var43 & arg2)) | var51 + var46) ^ var51 + var52 - var39 - var55))
    return result
def func6(arg17, arg18):
    if arg17 < arg18:
        var19 = -2097892168 | (arg18 + (-1800785889 | arg17))
    else:
        var19 = ((arg17 & 421) - arg17) | arg18
    var20 = arg17 + 105
    var21 = -328 - arg17
    var22 = (49 & arg18) + var21 | var20
    var23 = var21 + var21 & -634 ^ arg17
    var24 = (var21 | var20) | var23 & arg17
    var25 = var23 | var20
    var26 = var25 ^ (var24 ^ 434) - var22
    var27 = arg18 | (var25 & var24) | var21
    var28 = (1033424298 + var24 | var24) ^ var23
    var29 = ((var23 ^ var28) + -233661526) + var23
    if var26 < arg17:
        var30 = -148588792 + (var26 + var25 + var24)
    else:
        var30 = var21 - (arg18 & var29) - var27
    var31 = var20 - var25
    var32 = arg18 | var31
    var33 = (var28 | var28) & arg17
    var34 = 1238334750 | 166
    result = var32 | var29 - var21 & var28
    return result
def func5(arg12, arg13):
    var14 = 0
    for var15 in xrange(3):
        var14 += arg12 ^ var15 + arg13
    return var14
def func2(arg3, arg4):
    var5 = 0
    for var6 in [var5 ^ i for i in range(8)]:
        var5 += (var5 & arg3) - arg4
    return var5
def func3(arg8, arg9):
    closure = [0]
    def func4(acc, rest):
        var10 = 2 & (-10 - ((2 | acc & rest ^ 2) ^ -10))
        closure[0] += var10
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 7'
    print 'arg_number: 58'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var11 = func3(arg2, var7)
    var16 = func5(var7, arg1)
    var35 = func6(arg2, var11)
    if var7 < var11:
        var36 = var7 ^ var35 | var16 - var7
    else:
        var36 = (var11 | 65 ^ var7) ^ -806
    var37 = var16 ^ 1759366087
    if var7 < arg1:
        var38 = var37 - var35 ^ (-107 + 910)
    else:
        var38 = 150012291 | var11 - (arg2 ^ var37)
    var39 = arg2 - var35 ^ var35 ^ var16
    var40 = var35 ^ 258987595
    var41 = 1039314463 + arg1 + var39 & 115
    var42 = ((var40 & var41) - var41) + 778
    var43 = -364034237 + arg1
    var44 = var42 & var41
    var45 = var35 + var39
    var46 = var41 & var39 & var35
    var47 = var7 - var7
    var48 = var41 & (var43 + arg2)
    var49 = var41 ^ -902894577
    var50 = (var11 & var43) & var49 + var35
    var51 = var41 | var42
    var52 = arg1 | var44 & var48 & var35
    if var16 < var37:
        var53 = var44 + var52
    else:
        var53 = var42 - var52
    if var48 < var44:
        var54 = var47 & var41
    else:
        var54 = var44 ^ var37 & var39
    var55 = var11 & (var35 & var50)
    var56 = (var44 ^ var39) + (var55 - arg2)
    var57 = (arg2 | var46 & var44) ^ var51
    result = var44 ^ (arg2 ^ (((var57 - (var37 + var43 & arg2)) | var51 + var46) ^ var51 + var52 - var39 - var55))
    return result
def func6(arg17, arg18):
    if arg17 < arg18:
        var19 = -2097892168 | (arg18 + (-1800785889 | arg17))
    else:
        var19 = ((arg17 & 421) - arg17) | arg18
    var20 = arg17 + 105
    var21 = -328 - arg17
    var22 = (49 & arg18) + var21 | var20
    var23 = var21 + var21 & -634 ^ arg17
    var24 = (var21 | var20) | var23 & arg17
    var25 = var23 | var20
    var26 = var25 ^ (var24 ^ 434) - var22
    var27 = arg18 | (var25 & var24) | var21
    var28 = (1033424298 + var24 | var24) ^ var23
    var29 = ((var23 ^ var28) + -233661526) + var23
    if var26 < arg17:
        var30 = -148588792 + (var26 + var25 + var24)
    else:
        var30 = var21 - (arg18 & var29) - var27
    var31 = var20 - var25
    var32 = arg18 | var31
    var33 = (var28 | var28) & arg17
    var34 = 1238334750 | 166
    result = var32 | var29 - var21 & var28
    return result
def func5(arg12, arg13):
    var14 = 0
    for var15 in xrange(3):
        var14 += arg12 ^ var15 + arg13
    return var14
def func2(arg3, arg4):
    var5 = 0
    for var6 in [var5 ^ i for i in range(8)]:
        var5 += (var5 & arg3) - arg4
    return var5
def func3(arg8, arg9):
    closure = [0]
    def func4(acc, rest):
        var10 = 2 & (-10 - ((2 | acc & rest ^ 2) ^ -10))
        closure[0] += var10
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 7'
    print 'arg_number: 58'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var11 = func3(arg2, var7)
    var16 = func5(var7, arg1)
    var35 = func6(arg2, var11)
    if var7 < var11:
        var36 = var7 ^ var35 | var16 - var7
    else:
        var36 = (var11 | 65 ^ var7) ^ -806
    var37 = var16 ^ 1759366087
    if var7 < arg1:
        var38 = var37 - var35 ^ (-107 + 910)
    else:
        var38 = 150012291 | var11 - (arg2 ^ var37)
    var39 = arg2 - var35 ^ var35 ^ var16
    var40 = var35 ^ 258987595
    var41 = 1039314463 + arg1 + var39 & 115
    var42 = ((var40 & var41) - var41) + 778
    var43 = -364034237 + arg1
    var44 = var42 & var41
    var45 = var35 + var39
    var46 = var41 & var39 & var35
    var47 = var7 - var7
    var48 = var41 & (var43 + arg2)
    var49 = var41 ^ -902894577
    var50 = (var11 & var43) & var49 + var35
    var51 = var41 | var42
    var52 = arg1 | var44 & var48 & var35
    if var16 < var37:
        var53 = var44 + var52
    else:
        var53 = var42 - var52
    if var48 < var44:
        var54 = var47 & var41
    else:
        var54 = var44 ^ var37 & var39
    var55 = var11 & (var35 & var50)
    var56 = (var44 ^ var39) + (var55 - arg2)
    var57 = (arg2 | var46 & var44) ^ var51
    result = var44 ^ (arg2 ^ (((var57 - (var37 + var43 & arg2)) | var51 + var46) ^ var51 + var52 - var39 - var55))
    return result
def func6(arg17, arg18):
    if arg17 < arg18:
        var19 = -2097892168 | (arg18 + (-1800785889 | arg17))
    else:
        var19 = ((arg17 & 421) - arg17) | arg18
    var20 = arg17 + 105
    var21 = -328 - arg17
    var22 = (49 & arg18) + var21 | var20
    var23 = var21 + var21 & -634 ^ arg17
    var24 = (var21 | var20) | var23 & arg17
    var25 = var23 | var20
    var26 = var25 ^ (var24 ^ 434) - var22
    var27 = arg18 | (var25 & var24) | var21
    var28 = (1033424298 + var24 | var24) ^ var23
    var29 = ((var23 ^ var28) + -233661526) + var23
    if var26 < arg17:
        var30 = -148588792 + (var26 + var25 + var24)
    else:
        var30 = var21 - (arg18 & var29) - var27
    var31 = var20 - var25
    var32 = arg18 | var31
    var33 = (var28 | var28) & arg17
    var34 = 1238334750 | 166
    result = var32 | var29 - var21 & var28
    return result
def func5(arg12, arg13):
    var14 = 0
    for var15 in xrange(3):
        var14 += arg12 ^ var15 + arg13
    return var14
def func2(arg3, arg4):
    var5 = 0
    for var6 in [var5 ^ i for i in range(8)]:
        var5 += (var5 & arg3) - arg4
    return var5
def func3(arg8, arg9):
    closure = [0]
    def func4(acc, rest):
        var10 = 2 & (-10 - ((2 | acc & rest ^ 2) ^ -10))
        closure[0] += var10
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 7'
    print 'arg_number: 58'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var11 = func3(arg2, var7)
    var16 = func5(var7, arg1)
    var35 = func6(arg2, var11)
    if var7 < var11:
        var36 = var7 ^ var35 | var16 - var7
    else:
        var36 = (var11 | 65 ^ var7) ^ -806
    var37 = var16 ^ 1759366087
    if var7 < arg1:
        var38 = var37 - var35 ^ (-107 + 910)
    else:
        var38 = 150012291 | var11 - (arg2 ^ var37)
    var39 = arg2 - var35 ^ var35 ^ var16
    var40 = var35 ^ 258987595
    var41 = 1039314463 + arg1 + var39 & 115
    var42 = ((var40 & var41) - var41) + 778
    var43 = -364034237 + arg1
    var44 = var42 & var41
    var45 = var35 + var39
    var46 = var41 & var39 & var35
    var47 = var7 - var7
    var48 = var41 & (var43 + arg2)
    var49 = var41 ^ -902894577
    var50 = (var11 & var43) & var49 + var35
    var51 = var41 | var42
    var52 = arg1 | var44 & var48 & var35
    if var16 < var37:
        var53 = var44 + var52
    else:
        var53 = var42 - var52
    if var48 < var44:
        var54 = var47 & var41
    else:
        var54 = var44 ^ var37 & var39
    var55 = var11 & (var35 & var50)
    var56 = (var44 ^ var39) + (var55 - arg2)
    var57 = (arg2 | var46 & var44) ^ var51
    result = var44 ^ (arg2 ^ (((var57 - (var37 + var43 & arg2)) | var51 + var46) ^ var51 + var52 - var39 - var55))
    return result
def func6(arg17, arg18):
    if arg17 < arg18:
        var19 = -2097892168 | (arg18 + (-1800785889 | arg17))
    else:
        var19 = ((arg17 & 421) - arg17) | arg18
    var20 = arg17 + 105
    var21 = -328 - arg17
    var22 = (49 & arg18) + var21 | var20
    var23 = var21 + var21 & -634 ^ arg17
    var24 = (var21 | var20) | var23 & arg17
    var25 = var23 | var20
    var26 = var25 ^ (var24 ^ 434) - var22
    var27 = arg18 | (var25 & var24) | var21
    var28 = (1033424298 + var24 | var24) ^ var23
    var29 = ((var23 ^ var28) + -233661526) + var23
    if var26 < arg17:
        var30 = -148588792 + (var26 + var25 + var24)
    else:
        var30 = var21 - (arg18 & var29) - var27
    var31 = var20 - var25
    var32 = arg18 | var31
    var33 = (var28 | var28) & arg17
    var34 = 1238334750 | 166
    result = var32 | var29 - var21 & var28
    return result
def func5(arg12, arg13):
    var14 = 0
    for var15 in xrange(3):
        var14 += arg12 ^ var15 + arg13
    return var14
def func2(arg3, arg4):
    var5 = 0
    for var6 in [var5 ^ i for i in range(8)]:
        var5 += (var5 & arg3) - arg4
    return var5
def func3(arg8, arg9):
    closure = [0]
    def func4(acc, rest):
        var10 = 2 & (-10 - ((2 | acc & rest ^ 2) ^ -10))
        closure[0] += var10
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 7'
    print 'arg_number: 58'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var11 = func3(arg2, var7)
    var16 = func5(var7, arg1)
    var35 = func6(arg2, var11)
    if var7 < var11:
        var36 = var7 ^ var35 | var16 - var7
    else:
        var36 = (var11 | 65 ^ var7) ^ -806
    var37 = var16 ^ 1759366087
    if var7 < arg1:
        var38 = var37 - var35 ^ (-107 + 910)
    else:
        var38 = 150012291 | var11 - (arg2 ^ var37)
    var39 = arg2 - var35 ^ var35 ^ var16
    var40 = var35 ^ 258987595
    var41 = 1039314463 + arg1 + var39 & 115
    var42 = ((var40 & var41) - var41) + 778
    var43 = -364034237 + arg1
    var44 = var42 & var41
    var45 = var35 + var39
    var46 = var41 & var39 & var35
    var47 = var7 - var7
    var48 = var41 & (var43 + arg2)
    var49 = var41 ^ -902894577
    var50 = (var11 & var43) & var49 + var35
    var51 = var41 | var42
    var52 = arg1 | var44 & var48 & var35
    if var16 < var37:
        var53 = var44 + var52
    else:
        var53 = var42 - var52
    if var48 < var44:
        var54 = var47 & var41
    else:
        var54 = var44 ^ var37 & var39
    var55 = var11 & (var35 & var50)
    var56 = (var44 ^ var39) + (var55 - arg2)
    var57 = (arg2 | var46 & var44) ^ var51
    result = var44 ^ (arg2 ^ (((var57 - (var37 + var43 & arg2)) | var51 + var46) ^ var51 + var52 - var39 - var55))
    return result
def func6(arg17, arg18):
    if arg17 < arg18:
        var19 = -2097892168 | (arg18 + (-1800785889 | arg17))
    else:
        var19 = ((arg17 & 421) - arg17) | arg18
    var20 = arg17 + 105
    var21 = -328 - arg17
    var22 = (49 & arg18) + var21 | var20
    var23 = var21 + var21 & -634 ^ arg17
    var24 = (var21 | var20) | var23 & arg17
    var25 = var23 | var20
    var26 = var25 ^ (var24 ^ 434) - var22
    var27 = arg18 | (var25 & var24) | var21
    var28 = (1033424298 + var24 | var24) ^ var23
    var29 = ((var23 ^ var28) + -233661526) + var23
    if var26 < arg17:
        var30 = -148588792 + (var26 + var25 + var24)
    else:
        var30 = var21 - (arg18 & var29) - var27
    var31 = var20 - var25
    var32 = arg18 | var31
    var33 = (var28 | var28) & arg17
    var34 = 1238334750 | 166
    result = var32 | var29 - var21 & var28
    return result
def func5(arg12, arg13):
    var14 = 0
    for var15 in xrange(3):
        var14 += arg12 ^ var15 + arg13
    return var14
def func2(arg3, arg4):
    var5 = 0
    for var6 in [var5 ^ i for i in range(8)]:
        var5 += (var5 & arg3) - arg4
    return var5
def func3(arg8, arg9):
    closure = [0]
    def func4(acc, rest):
        var10 = 2 & (-10 - ((2 | acc & rest ^ 2) ^ -10))
        closure[0] += var10
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 7'
    print 'arg_number: 58'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var11 = func3(arg2, var7)
    var16 = func5(var7, arg1)
    var35 = func6(arg2, var11)
    if var7 < var11:
        var36 = var7 ^ var35 | var16 - var7
    else:
        var36 = (var11 | 65 ^ var7) ^ -806
    var37 = var16 ^ 1759366087
    if var7 < arg1:
        var38 = var37 - var35 ^ (-107 + 910)
    else:
        var38 = 150012291 | var11 - (arg2 ^ var37)
    var39 = arg2 - var35 ^ var35 ^ var16
    var40 = var35 ^ 258987595
    var41 = 1039314463 + arg1 + var39 & 115
    var42 = ((var40 & var41) - var41) + 778
    var43 = -364034237 + arg1
    var44 = var42 & var41
    var45 = var35 + var39
    var46 = var41 & var39 & var35
    var47 = var7 - var7
    var48 = var41 & (var43 + arg2)
    var49 = var41 ^ -902894577
    var50 = (var11 & var43) & var49 + var35
    var51 = var41 | var42
    var52 = arg1 | var44 & var48 & var35
    if var16 < var37:
        var53 = var44 + var52
    else:
        var53 = var42 - var52
    if var48 < var44:
        var54 = var47 & var41
    else:
        var54 = var44 ^ var37 & var39
    var55 = var11 & (var35 & var50)
    var56 = (var44 ^ var39) + (var55 - arg2)
    var57 = (arg2 | var46 & var44) ^ var51
    result = var44 ^ (arg2 ^ (((var57 - (var37 + var43 & arg2)) | var51 + var46) ^ var51 + var52 - var39 - var55))
    return result
def func6(arg17, arg18):
    if arg17 < arg18:
        var19 = -2097892168 | (arg18 + (-1800785889 | arg17))
    else:
        var19 = ((arg17 & 421) - arg17) | arg18
    var20 = arg17 + 105
    var21 = -328 - arg17
    var22 = (49 & arg18) + var21 | var20
    var23 = var21 + var21 & -634 ^ arg17
    var24 = (var21 | var20) | var23 & arg17
    var25 = var23 | var20
    var26 = var25 ^ (var24 ^ 434) - var22
    var27 = arg18 | (var25 & var24) | var21
    var28 = (1033424298 + var24 | var24) ^ var23
    var29 = ((var23 ^ var28) + -233661526) + var23
    if var26 < arg17:
        var30 = -148588792 + (var26 + var25 + var24)
    else:
        var30 = var21 - (arg18 & var29) - var27
    var31 = var20 - var25
    var32 = arg18 | var31
    var33 = (var28 | var28) & arg17
    var34 = 1238334750 | 166
    result = var32 | var29 - var21 & var28
    return result
def func5(arg12, arg13):
    var14 = 0
    for var15 in xrange(3):
        var14 += arg12 ^ var15 + arg13
    return var14
def func2(arg3, arg4):
    var5 = 0
    for var6 in [var5 ^ i for i in range(8)]:
        var5 += (var5 & arg3) - arg4
    return var5
def func3(arg8, arg9):
    closure = [0]
    def func4(acc, rest):
        var10 = 2 & (-10 - ((2 | acc & rest ^ 2) ^ -10))
        closure[0] += var10
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 7'
    print 'arg_number: 58'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var11 = func3(arg2, var7)
    var16 = func5(var7, arg1)
    var35 = func6(arg2, var11)
    if var7 < var11:
        var36 = var7 ^ var35 | var16 - var7
    else:
        var36 = (var11 | 65 ^ var7) ^ -806
    var37 = var16 ^ 1759366087
    if var7 < arg1:
        var38 = var37 - var35 ^ (-107 + 910)
    else:
        var38 = 150012291 | var11 - (arg2 ^ var37)
    var39 = arg2 - var35 ^ var35 ^ var16
    var40 = var35 ^ 258987595
    var41 = 1039314463 + arg1 + var39 & 115
    var42 = ((var40 & var41) - var41) + 778
    var43 = -364034237 + arg1
    var44 = var42 & var41
    var45 = var35 + var39
    var46 = var41 & var39 & var35
    var47 = var7 - var7
    var48 = var41 & (var43 + arg2)
    var49 = var41 ^ -902894577
    var50 = (var11 & var43) & var49 + var35
    var51 = var41 | var42
    var52 = arg1 | var44 & var48 & var35
    if var16 < var37:
        var53 = var44 + var52
    else:
        var53 = var42 - var52
    if var48 < var44:
        var54 = var47 & var41
    else:
        var54 = var44 ^ var37 & var39
    var55 = var11 & (var35 & var50)
    var56 = (var44 ^ var39) + (var55 - arg2)
    var57 = (arg2 | var46 & var44) ^ var51
    result = var44 ^ (arg2 ^ (((var57 - (var37 + var43 & arg2)) | var51 + var46) ^ var51 + var52 - var39 - var55))
    return result
def func6(arg17, arg18):
    if arg17 < arg18:
        var19 = -2097892168 | (arg18 + (-1800785889 | arg17))
    else:
        var19 = ((arg17 & 421) - arg17) | arg18
    var20 = arg17 + 105
    var21 = -328 - arg17
    var22 = (49 & arg18) + var21 | var20
    var23 = var21 + var21 & -634 ^ arg17
    var24 = (var21 | var20) | var23 & arg17
    var25 = var23 | var20
    var26 = var25 ^ (var24 ^ 434) - var22
    var27 = arg18 | (var25 & var24) | var21
    var28 = (1033424298 + var24 | var24) ^ var23
    var29 = ((var23 ^ var28) + -233661526) + var23
    if var26 < arg17:
        var30 = -148588792 + (var26 + var25 + var24)
    else:
        var30 = var21 - (arg18 & var29) - var27
    var31 = var20 - var25
    var32 = arg18 | var31
    var33 = (var28 | var28) & arg17
    var34 = 1238334750 | 166
    result = var32 | var29 - var21 & var28
    return result
def func5(arg12, arg13):
    var14 = 0
    for var15 in xrange(3):
        var14 += arg12 ^ var15 + arg13
    return var14
def func2(arg3, arg4):
    var5 = 0
    for var6 in [var5 ^ i for i in range(8)]:
        var5 += (var5 & arg3) - arg4
    return var5
def func3(arg8, arg9):
    closure = [0]
    def func4(acc, rest):
        var10 = 2 & (-10 - ((2 | acc & rest ^ 2) ^ -10))
        closure[0] += var10
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 7'
    print 'arg_number: 58'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var11 = func3(arg2, var7)
    var16 = func5(var7, arg1)
    var35 = func6(arg2, var11)
    if var7 < var11:
        var36 = var7 ^ var35 | var16 - var7
    else:
        var36 = (var11 | 65 ^ var7) ^ -806
    var37 = var16 ^ 1759366087
    if var7 < arg1:
        var38 = var37 - var35 ^ (-107 + 910)
    else:
        var38 = 150012291 | var11 - (arg2 ^ var37)
    var39 = arg2 - var35 ^ var35 ^ var16
    var40 = var35 ^ 258987595
    var41 = 1039314463 + arg1 + var39 & 115
    var42 = ((var40 & var41) - var41) + 778
    var43 = -364034237 + arg1
    var44 = var42 & var41
    var45 = var35 + var39
    var46 = var41 & var39 & var35
    var47 = var7 - var7
    var48 = var41 & (var43 + arg2)
    var49 = var41 ^ -902894577
    var50 = (var11 & var43) & var49 + var35
    var51 = var41 | var42
    var52 = arg1 | var44 & var48 & var35
    if var16 < var37:
        var53 = var44 + var52
    else:
        var53 = var42 - var52
    if var48 < var44:
        var54 = var47 & var41
    else:
        var54 = var44 ^ var37 & var39
    var55 = var11 & (var35 & var50)
    var56 = (var44 ^ var39) + (var55 - arg2)
    var57 = (arg2 | var46 & var44) ^ var51
    result = var44 ^ (arg2 ^ (((var57 - (var37 + var43 & arg2)) | var51 + var46) ^ var51 + var52 - var39 - var55))
    return result
def func6(arg17, arg18):
    if arg17 < arg18:
        var19 = -2097892168 | (arg18 + (-1800785889 | arg17))
    else:
        var19 = ((arg17 & 421) - arg17) | arg18
    var20 = arg17 + 105
    var21 = -328 - arg17
    var22 = (49 & arg18) + var21 | var20
    var23 = var21 + var21 & -634 ^ arg17
    var24 = (var21 | var20) | var23 & arg17
    var25 = var23 | var20
    var26 = var25 ^ (var24 ^ 434) - var22
    var27 = arg18 | (var25 & var24) | var21
    var28 = (1033424298 + var24 | var24) ^ var23
    var29 = ((var23 ^ var28) + -233661526) + var23
    if var26 < arg17:
        var30 = -148588792 + (var26 + var25 + var24)
    else:
        var30 = var21 - (arg18 & var29) - var27
    var31 = var20 - var25
    var32 = arg18 | var31
    var33 = (var28 | var28) & arg17
    var34 = 1238334750 | 166
    result = var32 | var29 - var21 & var28
    return result
def func5(arg12, arg13):
    var14 = 0
    for var15 in xrange(3):
        var14 += arg12 ^ var15 + arg13
    return var14
def func2(arg3, arg4):
    var5 = 0
    for var6 in [var5 ^ i for i in range(8)]:
        var5 += (var5 & arg3) - arg4
    return var5
def func3(arg8, arg9):
    closure = [0]
    def func4(acc, rest):
        var10 = 2 & (-10 - ((2 | acc & rest ^ 2) ^ -10))
        closure[0] += var10
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 7'
    print 'arg_number: 58'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var11 = func3(arg2, var7)
    var16 = func5(var7, arg1)
    var35 = func6(arg2, var11)
    if var7 < var11:
        var36 = var7 ^ var35 | var16 - var7
    else:
        var36 = (var11 | 65 ^ var7) ^ -806
    var37 = var16 ^ 1759366087
    if var7 < arg1:
        var38 = var37 - var35 ^ (-107 + 910)
    else:
        var38 = 150012291 | var11 - (arg2 ^ var37)
    var39 = arg2 - var35 ^ var35 ^ var16
    var40 = var35 ^ 258987595
    var41 = 1039314463 + arg1 + var39 & 115
    var42 = ((var40 & var41) - var41) + 778
    var43 = -364034237 + arg1
    var44 = var42 & var41
    var45 = var35 + var39
    var46 = var41 & var39 & var35
    var47 = var7 - var7
    var48 = var41 & (var43 + arg2)
    var49 = var41 ^ -902894577
    var50 = (var11 & var43) & var49 + var35
    var51 = var41 | var42
    var52 = arg1 | var44 & var48 & var35
    if var16 < var37:
        var53 = var44 + var52
    else:
        var53 = var42 - var52
    if var48 < var44:
        var54 = var47 & var41
    else:
        var54 = var44 ^ var37 & var39
    var55 = var11 & (var35 & var50)
    var56 = (var44 ^ var39) + (var55 - arg2)
    var57 = (arg2 | var46 & var44) ^ var51
    result = var44 ^ (arg2 ^ (((var57 - (var37 + var43 & arg2)) | var51 + var46) ^ var51 + var52 - var39 - var55))
    return result
def func6(arg17, arg18):
    if arg17 < arg18:
        var19 = -2097892168 | (arg18 + (-1800785889 | arg17))
    else:
        var19 = ((arg17 & 421) - arg17) | arg18
    var20 = arg17 + 105
    var21 = -328 - arg17
    var22 = (49 & arg18) + var21 | var20
    var23 = var21 + var21 & -634 ^ arg17
    var24 = (var21 | var20) | var23 & arg17
    var25 = var23 | var20
    var26 = var25 ^ (var24 ^ 434) - var22
    var27 = arg18 | (var25 & var24) | var21
    var28 = (1033424298 + var24 | var24) ^ var23
    var29 = ((var23 ^ var28) + -233661526) + var23
    if var26 < arg17:
        var30 = -148588792 + (var26 + var25 + var24)
    else:
        var30 = var21 - (arg18 & var29) - var27
    var31 = var20 - var25
    var32 = arg18 | var31
    var33 = (var28 | var28) & arg17
    var34 = 1238334750 | 166
    result = var32 | var29 - var21 & var28
    return result
def func5(arg12, arg13):
    var14 = 0
    for var15 in xrange(3):
        var14 += arg12 ^ var15 + arg13
    return var14
def func2(arg3, arg4):
    var5 = 0
    for var6 in [var5 ^ i for i in range(8)]:
        var5 += (var5 & arg3) - arg4
    return var5
def func3(arg8, arg9):
    closure = [0]
    def func4(acc, rest):
        var10 = 2 & (-10 - ((2 | acc & rest ^ 2) ^ -10))
        closure[0] += var10
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 7'
    print 'arg_number: 58'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var11 = func3(arg2, var7)
    var16 = func5(var7, arg1)
    var35 = func6(arg2, var11)
    if var7 < var11:
        var36 = var7 ^ var35 | var16 - var7
    else:
        var36 = (var11 | 65 ^ var7) ^ -806
    var37 = var16 ^ 1759366087
    if var7 < arg1:
        var38 = var37 - var35 ^ (-107 + 910)
    else:
        var38 = 150012291 | var11 - (arg2 ^ var37)
    var39 = arg2 - var35 ^ var35 ^ var16
    var40 = var35 ^ 258987595
    var41 = 1039314463 + arg1 + var39 & 115
    var42 = ((var40 & var41) - var41) + 778
    var43 = -364034237 + arg1
    var44 = var42 & var41
    var45 = var35 + var39
    var46 = var41 & var39 & var35
    var47 = var7 - var7
    var48 = var41 & (var43 + arg2)
    var49 = var41 ^ -902894577
    var50 = (var11 & var43) & var49 + var35
    var51 = var41 | var42
    var52 = arg1 | var44 & var48 & var35
    if var16 < var37:
        var53 = var44 + var52
    else:
        var53 = var42 - var52
    if var48 < var44:
        var54 = var47 & var41
    else:
        var54 = var44 ^ var37 & var39
    var55 = var11 & (var35 & var50)
    var56 = (var44 ^ var39) + (var55 - arg2)
    var57 = (arg2 | var46 & var44) ^ var51
    result = var44 ^ (arg2 ^ (((var57 - (var37 + var43 & arg2)) | var51 + var46) ^ var51 + var52 - var39 - var55))
    return result
def func6(arg17, arg18):
    if arg17 < arg18:
        var19 = -2097892168 | (arg18 + (-1800785889 | arg17))
    else:
        var19 = ((arg17 & 421) - arg17) | arg18
    var20 = arg17 + 105
    var21 = -328 - arg17
    var22 = (49 & arg18) + var21 | var20
    var23 = var21 + var21 & -634 ^ arg17
    var24 = (var21 | var20) | var23 & arg17
    var25 = var23 | var20
    var26 = var25 ^ (var24 ^ 434) - var22
    var27 = arg18 | (var25 & var24) | var21
    var28 = (1033424298 + var24 | var24) ^ var23
    var29 = ((var23 ^ var28) + -233661526) + var23
    if var26 < arg17:
        var30 = -148588792 + (var26 + var25 + var24)
    else:
        var30 = var21 - (arg18 & var29) - var27
    var31 = var20 - var25
    var32 = arg18 | var31
    var33 = (var28 | var28) & arg17
    var34 = 1238334750 | 166
    result = var32 | var29 - var21 & var28
    return result
def func5(arg12, arg13):
    var14 = 0
    for var15 in xrange(3):
        var14 += arg12 ^ var15 + arg13
    return var14
def func2(arg3, arg4):
    var5 = 0
    for var6 in [var5 ^ i for i in range(8)]:
        var5 += (var5 & arg3) - arg4
    return var5
def func3(arg8, arg9):
    closure = [0]
    def func4(acc, rest):
        var10 = 2 & (-10 - ((2 | acc & rest ^ 2) ^ -10))
        closure[0] += var10
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 7'
    print 'arg_number: 58'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var11 = func3(arg2, var7)
    var16 = func5(var7, arg1)
    var35 = func6(arg2, var11)
    if var7 < var11:
        var36 = var7 ^ var35 | var16 - var7
    else:
        var36 = (var11 | 65 ^ var7) ^ -806
    var37 = var16 ^ 1759366087
    if var7 < arg1:
        var38 = var37 - var35 ^ (-107 + 910)
    else:
        var38 = 150012291 | var11 - (arg2 ^ var37)
    var39 = arg2 - var35 ^ var35 ^ var16
    var40 = var35 ^ 258987595
    var41 = 1039314463 + arg1 + var39 & 115
    var42 = ((var40 & var41) - var41) + 778
    var43 = -364034237 + arg1
    var44 = var42 & var41
    var45 = var35 + var39
    var46 = var41 & var39 & var35
    var47 = var7 - var7
    var48 = var41 & (var43 + arg2)
    var49 = var41 ^ -902894577
    var50 = (var11 & var43) & var49 + var35
    var51 = var41 | var42
    var52 = arg1 | var44 & var48 & var35
    if var16 < var37:
        var53 = var44 + var52
    else:
        var53 = var42 - var52
    if var48 < var44:
        var54 = var47 & var41
    else:
        var54 = var44 ^ var37 & var39
    var55 = var11 & (var35 & var50)
    var56 = (var44 ^ var39) + (var55 - arg2)
    var57 = (arg2 | var46 & var44) ^ var51
    result = var44 ^ (arg2 ^ (((var57 - (var37 + var43 & arg2)) | var51 + var46) ^ var51 + var52 - var39 - var55))
    return result
def func6(arg17, arg18):
    if arg17 < arg18:
        var19 = -2097892168 | (arg18 + (-1800785889 | arg17))
    else:
        var19 = ((arg17 & 421) - arg17) | arg18
    var20 = arg17 + 105
    var21 = -328 - arg17
    var22 = (49 & arg18) + var21 | var20
    var23 = var21 + var21 & -634 ^ arg17
    var24 = (var21 | var20) | var23 & arg17
    var25 = var23 | var20
    var26 = var25 ^ (var24 ^ 434) - var22
    var27 = arg18 | (var25 & var24) | var21
    var28 = (1033424298 + var24 | var24) ^ var23
    var29 = ((var23 ^ var28) + -233661526) + var23
    if var26 < arg17:
        var30 = -148588792 + (var26 + var25 + var24)
    else:
        var30 = var21 - (arg18 & var29) - var27
    var31 = var20 - var25
    var32 = arg18 | var31
    var33 = (var28 | var28) & arg17
    var34 = 1238334750 | 166
    result = var32 | var29 - var21 & var28
    return result
def func5(arg12, arg13):
    var14 = 0
    for var15 in xrange(3):
        var14 += arg12 ^ var15 + arg13
    return var14
def func2(arg3, arg4):
    var5 = 0
    for var6 in [var5 ^ i for i in range(8)]:
        var5 += (var5 & arg3) - arg4
    return var5
def func3(arg8, arg9):
    closure = [0]
    def func4(acc, rest):
        var10 = 2 & (-10 - ((2 | acc & rest ^ 2) ^ -10))
        closure[0] += var10
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 7'
    print 'arg_number: 58'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var7 = func2(arg1, arg2)
    var11 = func3(arg2, var7)
    var16 = func5(var7, arg1)
    var35 = func6(arg2, var11)
    if var7 < var11:
        var36 = var7 ^ var35 | var16 - var7
    else:
        var36 = (var11 | 65 ^ var7) ^ -806
    var37 = var16 ^ 1759366087
    if var7 < arg1:
        var38 = var37 - var35 ^ (-107 + 910)
    else:
        var38 = 150012291 | var11 - (arg2 ^ var37)
    var39 = arg2 - var35 ^ var35 ^ var16
    var40 = var35 ^ 258987595
    var41 = 1039314463 + arg1 + var39 & 115
    var42 = ((var40 & var41) - var41) + 778
    var43 = -364034237 + arg1
    var44 = var42 & var41
    var45 = var35 + var39
    var46 = var41 & var39 & var35
    var47 = var7 - var7
    var48 = var41 & (var43 + arg2)
    var49 = var41 ^ -902894577
    var50 = (var11 & var43) & var49 + var35
    var51 = var41 | var42
    var52 = arg1 | var44 & var48 & var35
    if var16 < var37:
        var53 = var44 + var52
    else:
        var53 = var42 - var52
    if var48 < var44:
        var54 = var47 & var41
    else:
        var54 = var44 ^ var37 & var39
    var55 = var11 & (var35 & var50)
    var56 = (var44 ^ var39) + (var55 - arg2)
    var57 = (arg2 | var46 & var44) ^ var51
    result = var44 ^ (arg2 ^ (((var57 - (var37 + var43 & arg2)) | var51 + var46) ^ var51 + var52 - var39 - var55))
    return result
def func6(arg17, arg18):
    if arg17 < arg18:
        var19 = -2097892168 | (arg18 + (-1800785889 | arg17))
    else:
        var19 = ((arg17 & 421) - arg17) | arg18
    var20 = arg17 + 105
    var21 = -328 - arg17
    var22 = (49 & arg18) + var21 | var20
    var23 = var21 + var21 & -634 ^ arg17
    var24 = (var21 | var20) | var23 & arg17
    var25 = var23 | var20
    var26 = var25 ^ (var24 ^ 434) - var22
    var27 = arg18 | (var25 & var24) | var21
    var28 = (1033424298 + var24 | var24) ^ var23
    var29 = ((var23 ^ var28) + -233661526) + var23
    if var26 < arg17:
        var30 = -148588792 + (var26 + var25 + var24)
    else:
        var30 = var21 - (arg18 & var29) - var27
    var31 = var20 - var25
    var32 = arg18 | var31
    var33 = (var28 | var28) & arg17
    var34 = 1238334750 | 166
    result = var32 | var29 - var21 & var28
    return result
def func5(arg12, arg13):
    var14 = 0
    for var15 in xrange(3):
        var14 += arg12 ^ var15 + arg13
    return var14
def func2(arg3, arg4):
    var5 = 0
    for var6 in [var5 ^ i for i in range(8)]:
        var5 += (var5 & arg3) - arg4
    return var5
def func3(arg8, arg9):
    closure = [0]
    def func4(acc, rest):
        var10 = 2 & (-10 - ((2 | acc & rest ^ 2) ^ -10))
        closure[0] += var10
        if acc == 0:
            return var10
        else:
            result = func4(acc - 1, var10)
            return result
    result = func4(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 7'
    print 'arg_number: 58'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
